
// –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
const questions = [
    {
        id: 1,
        text: "–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –≤—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —É–ø–∞–¥–æ–∫ —Å–∏–ª –∏–ª–∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å?",
        type: "scale",
        answers: [
            { text: "–ù–∏–∫–æ–≥–¥–∞", value: 0, emoji: "üòä" },
            { text: "–†–µ–¥–∫–æ", value: 1, emoji: "üôÇ" },
            { text: "–ò–Ω–æ–≥–¥–∞", value: 2, emoji: "üòê" },
            { text: "–ß–∞—Å—Ç–æ", value: 3, emoji: "üòî" },
            { text: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 2,
        text: "–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω–æ –≤–∞–º —Å—Ç–∞–ª–æ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –ø—Ä–∏–≤—ã—á–Ω—ã—Ö –¥–µ–ª?",
        type: "scale",
        answers: [
            { text: "–í—Å–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ", value: 0, emoji: "üòÑ" },
            { text: "–ù–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ", value: 1, emoji: "üôÇ" },
            { text: "–ó–∞–º–µ—Ç–Ω–æ —Å–ª–æ–∂–Ω–µ–µ", value: 2, emoji: "üòê" },
            { text: "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ", value: 3, emoji: "üòï" },
            { text: "–ù–µ –ø–æ–ª—É—á–∞—é —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 3,
        text: "–ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–æ–µ–≥–æ —Å–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
        type: "choice",
        answers: [
            { text: "–°–ø–ª—é –æ—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ—Å—ã–ø–∞—é—Å—å –±–æ–¥—Ä—ã–º", value: 0, emoji: "üò¥" },
            { text: "–ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—Å—ã–ø–∞–Ω–∏–µ–º", value: 1, emoji: "üòä" },
            { text: "–ß–∞—Å—Ç–æ –ø—Ä–æ—Å—ã–ø–∞—é—Å—å –Ω–æ—á—å—é", value: 2, emoji: "üòê" },
            { text: "–°–ø–ª—é –ø–ª–æ—Ö–æ, –ø—Ä–æ—Å—ã–ø–∞—é—Å—å —É—Å—Ç–∞–≤—à–∏–º", value: 3, emoji: "üòî" },
            { text: "–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 4,
        text: "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Ç—Ä–µ–≤–æ–≥—É –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ?",
        type: "scale",
        answers: [
            { text: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–æ–≥–¥–∞", value: 0, emoji: "üòå" },
            { text: "–†–µ–¥–∫–æ", value: 1, emoji: "üôÇ" },
            { text: "–ò–Ω–æ–≥–¥–∞", value: 2, emoji: "üòê" },
            { text: "–ß–∞—Å—Ç–æ", value: 3, emoji: "üò∞" },
            { text: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ", value: 4, emoji: "üò®" }
        ]
    },
    {
        id: 5,
        text: "–ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –≤–∞–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ —É—á–µ–±–µ?",
        type: "scale",
        answers: [
            { text: "–õ–µ–≥–∫–æ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞", value: 0, emoji: "üéØ" },
            { text: "–ù–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ", value: 1, emoji: "üôÇ" },
            { text: "–ó–∞–º–µ—Ç–Ω–æ —Ç—Ä—É–¥–Ω–µ–µ", value: 2, emoji: "üòê" },
            { text: "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ", value: 3, emoji: "üòî" },
            { text: "–ü–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 6,
        text: "–ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–∞—à –∞–ø–ø–µ—Ç–∏—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏?",
        type: "choice",
        answers: [
            { text: "–û—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º", value: 0, emoji: "üçΩÔ∏è" },
            { text: "–ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∑–∏–ª—Å—è", value: 1, emoji: "üôÇ" },
            { text: "–ó–∞–º–µ—Ç–Ω–æ —Å–Ω–∏–∑–∏–ª—Å—è", value: 2, emoji: "üòê" },
            { text: "–ï–º –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ", value: 2, emoji: "üòê" },
            { text: "–ü–æ—á—Ç–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –µ—Å—Ç—å", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 7,
        text: "–ö–∞–∫ —á–∞—Å—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç –º—ã—Å–ª–∏ –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–∏–∫—á–µ–º–Ω–æ—Å—Ç–∏?",
        type: "scale",
        answers: [
            { text: "–ù–∏–∫–æ–≥–¥–∞", value: 0, emoji: "üòä" },
            { text: "–û—á–µ–Ω—å —Ä–µ–¥–∫–æ", value: 1, emoji: "üôÇ" },
            { text: "–ò–Ω–æ–≥–¥–∞", value: 2, emoji: "üòê" },
            { text: "–ß–∞—Å—Ç–æ", value: 3, emoji: "üòî" },
            { text: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 8,
        text: "–ù–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –±–ª–∏–∑–∫–∏–º–∏?",
        type: "choice",
        answers: [
            { text: "–ö–∞–∫ –æ–±—ã—á–Ω–æ, —Ä–µ–≥—É–ª—è—Ä–Ω–æ", value: 0, emoji: "üë•" },
            { text: "–ù–µ–º–Ω–æ–≥–æ —Ä–µ–∂–µ", value: 1, emoji: "üôÇ" },
            { text: "–ó–∞–º–µ—Ç–Ω–æ –º–µ–Ω—å—à–µ –æ–±—â–∞—é—Å—å", value: 2, emoji: "üòê" },
            { text: "–ò–∑–±–µ–≥–∞—é –æ–±—â–µ–Ω–∏—è", value: 3, emoji: "üòî" },
            { text: "–ü–æ—á—Ç–∏ –Ω–∏ —Å –∫–µ–º –Ω–µ –æ–±—â–∞—é—Å—å", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 9,
        text: "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —É—Ç—Ä–æ–º?",
        type: "scale",
        answers: [
            { text: "–ü–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏", value: 0, emoji: "‚ö°" },
            { text: "–•–æ—Ä–æ—à–æ", value: 1, emoji: "üòä" },
            { text: "–°—Ä–µ–¥–Ω–µ", value: 2, emoji: "üòê" },
            { text: "–ù–∏–∑–∫–∏–π", value: 3, emoji: "üòî" },
            { text: "–°–æ–≤—Å–µ–º –Ω–µ—Ç —Å–∏–ª", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 10,
        text: "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å?",
        type: "scale",
        answers: [
            { text: "–ù–∏–∫–æ–≥–¥–∞", value: 0, emoji: "üåü" },
            { text: "–†–µ–¥–∫–æ", value: 1, emoji: "üôÇ" },
            { text: "–ò–Ω–æ–≥–¥–∞", value: 2, emoji: "üòê" },
            { text: "–ß–∞—Å—Ç–æ", value: 3, emoji: "üòî" },
            { text: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 11,
        text: "–ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –≤–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
        type: "scale",
        answers: [
            { text: "–õ–µ–≥–∫–æ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞", value: 0, emoji: "‚úÖ" },
            { text: "–ù–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ", value: 1, emoji: "üôÇ" },
            { text: "–ó–∞–º–µ—Ç–Ω–æ —Ç—Ä—É–¥–Ω–µ–µ", value: 2, emoji: "üòê" },
            { text: "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ", value: 3, emoji: "üòî" },
            { text: "–ü–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ", value: 4, emoji: "üòû" }
        ]
    },
    {
        id: 12,
        text: "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü?",
        type: "scale",
        answers: [
            { text: "–û—Ç–ª–∏—á–Ω–æ–µ", value: 0, emoji: "üòÑ" },
            { text: "–•–æ—Ä–æ—à–µ–µ", value: 1, emoji: "üòä" },
            { text: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", value: 2, emoji: "üòê" },
            { text: "–ü–ª–æ—Ö–æ–µ", value: 3, emoji: "üòî" },
            { text: "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ", value: 4, emoji: "üòû" }
        ]
    }
];

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let currentQuestion = 0;
let answers = [];
let testStarted = false;

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–º
function startTest() {
    testStarted = true;
    document.querySelector('.hero').style.display = 'none';
    document.getElementById('test-container').style.display = 'block';
    document.getElementById('test-container').scrollIntoView({ behavior: 'smooth' });

    showQuestion(0);
    updateProgress();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    if (typeof gtag !== 'undefined') {
        gtag('event', 'test_started', {
            'event_category': 'engagement',
            'event_label': 'depression_test'
        });
    }
}

function showQuestion(index) {
    const question = questions[index];
    const container = document.getElementById('question-container');

    container.innerHTML = `
        <div class="question" id="question-${question.id}">
            <h3>${question.text}</h3>
            <div class="answers" id="answers-${question.id}">
                ${question.answers.map((answer, i) => `
                    <label class="answer-option" data-value="${answer.value}">
                        <input type="radio" name="question-${question.id}" value="${answer.value}" onchange="selectAnswer(${answer.value})">
                        <div class="answer-content">
                            <span class="answer-emoji">${answer.emoji}</span>
                            <span class="answer-text">${answer.text}</span>
                        </div>
                    </label>
                `).join('')}
            </div>
        </div>
    `;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    updateNavigationButtons();
}

function selectAnswer(value) {
    answers[currentQuestion] = value;
    document.getElementById('next-button').disabled = false;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    const selectedOption = document.querySelector(`label[data-value="${value}"]`);
    document.querySelectorAll('.answer-option').forEach(option => {
        option.classList.remove('selected');
    });
    selectedOption.classList.add('selected');
}

function nextQuestion() {
    if (currentQuestion < questions.length - 1) {
        currentQuestion++;
        showQuestion(currentQuestion);
        updateProgress();
        updateNavigationButtons();
    } else {
        finishTest();
    }
}

function previousQuestion() {
    if (currentQuestion > 0) {
        currentQuestion--;
        showQuestion(currentQuestion);
        updateProgress();
        updateNavigationButtons();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if (answers[currentQuestion] !== undefined) {
            const radio = document.querySelector(`input[value="${answers[currentQuestion]}"]`);
            if (radio) {
                radio.checked = true;
                selectAnswer(answers[currentQuestion]);
            }
        }
    }
}

function updateProgress() {
    const progress = ((currentQuestion + 1) / questions.length) * 100;
    document.getElementById('progress-fill').style.width = `${progress}%`;
    document.getElementById('progress-text').textContent = `–í–æ–ø—Ä–æ—Å ${currentQuestion + 1} –∏–∑ ${questions.length}`;
}

function updateNavigationButtons() {
    const prevButton = document.getElementById('prev-button');
    const nextButton = document.getElementById('next-button');

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if (currentQuestion > 0) {
        prevButton.style.display = 'block';
    } else {
        prevButton.style.display = 'none';
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
    if (currentQuestion === questions.length - 1) {
        nextButton.textContent = '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Üí';
    } else {
        nextButton.textContent = '–î–∞–ª–µ–µ ‚Üí';
    }

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
    nextButton.disabled = answers[currentQuestion] === undefined;
}

function finishTest() {
    const score = calculateScore();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if (typeof gtag !== 'undefined') {
        gtag('event', 'test_completed', {
            'event_category': 'engagement',
            'event_label': 'depression_test',
            'value': score
        });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è email
    showEmailModal(score);
}

function calculateScore() {
    const totalPossible = questions.length * 4; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
    const userScore = answers.reduce((sum, answer) => sum + answer, 0);
    return Math.round((userScore / totalPossible) * 100);
}

function showEmailModal(score) {
    window.testResult = score;
    document.getElementById('email-modal').style.display = 'flex';
}

function closeModal() {
    document.getElementById('email-modal').style.display = 'none';
}

function submitEmail(event) {
    event.preventDefault();
    const email = document.getElementById('email-input').value;
    const score = window.testResult;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CRM
    sendToEmailService(email, score);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    closeModal();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    displayResults(score);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if (typeof gtag !== 'undefined') {
        gtag('event', 'email_submitted', {
            'event_category': 'conversion',
            'event_label': 'test_results'
        });
    }
}

function sendToEmailService(email, score) {
    const resultType = getResultType(score);
    const utmSource = getUTMSource();

    // –ó–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º email-—Å–µ—Ä–≤–∏—Å–æ–º
    fetch('/api/subscribe', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            email: email,
            score: score,
            result_type: resultType,
            source: utmSource,
            timestamp: new Date().toISOString(),
            answers: answers
        })
    }).then(response => {
        if (response.ok) {
            console.log('Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ CRM');
        }
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
    });
}

function getUTMSource() {
    const urlParams = new URLSearchParams(window.location.search);
    return {
        source: urlParams.get('utm_source') || 'direct',
        medium: urlParams.get('utm_medium') || 'none',
        campaign: urlParams.get('utm_campaign') || 'none'
    };
}

function getResultType(score) {
    if (score >= 80) {
        return '–í—ã—Å–æ–∫–∏–π';
    } else if (score >= 60) {
        return '–°—Ä–µ–¥–Ω–∏–π';
    } else if (score >= 40) {
        return '–ù–∏–∑–∫–∏–π';
    } else {
        return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
document.getElementById('start-button').addEventListener('click', startTest);
document.getElementById('next-button').addEventListener('click', nextQuestion);
document.getElementById('prev-button').addEventListener('click', previousQuestion);
document.getElementById('email-form').addEventListener('submit', submitEmail);
document.getElementById('close-modal').addEventListener('click', closeModal);